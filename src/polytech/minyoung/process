---
layout : home
---
# 프로세스

## 프로세스의 이해

리눅스 서버에서는 사용자가 실행하는 프로그램뿐만 아니라 시스템 운영을 위하여 실행되는 시스템 프로그램 등 여러 개의 프로그램이 가동된다.
하나의 프로그램은 여러 개의 분할된 단위 조각이 동시에 실행되거나, 실행과 대기가 반복되어 일어나기도 한다.
또한 리눅스 서버 내에서는 여러개 프로그램이 동시에 수행되고 있기 때문에 이러한실행 단위들이 동시에 규칙을 가지고 작동하고로 규정되어 있음.

이러한 프로그램의 실행 단위 = 프로세스

### (1) 프로세스와 데몬

#### 프로세스와 데몬

- 프로세스 : 컴퓨터 내에서 실행 중인 프로그램
- 데몬 : 주기적인 서비스 요청을 처리하기 위해 계속 실행되는 특별한 프로그램(telnted, ftpd)
- 프로세스는 프로세스명과 프로세스 번호(Process id, 약자 PID) 로 표현
- 프로세스가 실행 중  자신에게 종속적인 프로세스를 두어 보조업무를 처리하는데 , 이 두 프로세스를 부모 프로세스, 자식 프로세스라고 함.
- 윈도우에서 작업 관리자를 통하여 프로세스의 실행상황을 볼 수 있는데 이러한 개념은 유닉스, 리눅스에서의개념으로부터 시작됨.

#### 프로세스 스케줄링

리눅스 서버에서 사용자의 프로그램 및 시스템 프로그램 등 복수의 프로그램이 동시에 실행되기 위하여 프로그램의 실행단위인 프로세스가 일정한 규칙에 의하여 구동외는데 이것이 = **프로세스 스케줄링**

##### 프로세스 스케줄링 

- 프로레스가 일을 실행하는 상황은 상태가 주기적으로 반복됨
- 즉, 여러개의 일을 동시에 실행하기 위하여 프로그램의 처리(프로세스, 프로세싱)를 시간을 분할하여 프로세스를 배분함.

#####프로세스 스케줄링 상태 변화

- 처리되는 프로세스는 시스템의 처리 우선순위에 따라 잠시 정지하여 대가하거나 계속 CPU를 배분 받아 일을 처리할 수 있는 상황이 반복되는 개념.
- 프로세스 상태

a) NEW: 새로운 프로그램이 프로세스로 실행

b) READY: 프로세스가 CPU 할당이 준비된 상태

c)WAITINIG: IO나 이벤트 처리로 프로세스가 기다리고 있는 상태

d)RUNNNIING: 프로세스가 CPU에서 실행되고 있는 상태

e)TERMINATED: 프로세스의 처리가 완료되어 끝난 상태

### 프로세스 조회

리눅스 서버 내 프로세스의 실행, 중지, 과부하 등을 점검하기 위하여 프로세스를 조회

#### 프로세스 기본 조회

##### /proc/ 디렉토리 내의 파일로 프로세스 상황을 인지

- 프로세스들은 파일 상태로 리눅스 서버에서 관리 됨
- 숫자로 나타나고 있는 파일이 해당 번호의 프로세스가 사용하고 있는 시스템 영역

#####  /proc/ cpuinfo 파일은 cpu 관련 상황을 알 수 있는 파일이다

##### ps

- ps 는 프로세스를 조회하는 유용한 명령어
- ps 명령 출력 필드의 의미는

— USER : 프로세스 소유자의 계정이름 

— PPID : 부모 프로세스의 PID

— % CPU : 프로세스의 CPU 사용량

— & MEM : 프로세스가 사용하는 시스템 메모리 자원량

— VSZ : 가상 메모리

— RSS : 사용된 실제 메모리

— TIME :  총 CPU 사용시간

— CMD : 실행된 프로세스 명령어

#### 프로세스 관련 현호아 조회

##### pstree

- pstree는 시스템 프로세스의 부모 자식관계 등 연관관계를 트리 구조로 보여줌

##### top

- top 은 프로세스들의 실시간 구동 상황을 보여줌
- 가장 상단에 위치한 프로세스가 시스템 자원을 가장 많이 사용하는 프로세스임.
- 시스템 상황이 문제가 있을 때 혹시 불필요한 프로세스가 시스템 자원을 차지하고 있지 않은지 인지하기 위한 유용한 명령어
- 명령어 실행 시 h 키를 누르면 도움말이 나타남. man top 통하여 명령어 확인

##### ulimit -a

- ulimit -a 로 프로세스 자원 한도를 보여줌
- 해당 서버의 총 자원량과 사용되고 있는 자원량을 볼 수 있음
- 시스템 상황을 모니터링하는 데 유용한 명령어

##### vmstat

- vmstat 는 cpu 활동상황을 보여준다.

## 프로세스의 제어

리눅스 서버 운영체계에서 프로그램을 실행시키고, 이때 실행되는 프로세스를 관리하고 제어하는 일은 시스템 운영업무를 수행하는 데 있어서 가장 중요한 일이다.

이러한 프로세스를 제어하기 위한 포그라운드, 백그라운드 처리, 프로세스 스케줄러, 시작 프로그램 처리 등을 이해한 후 실습 을 해보도록 한다.

### (1) 포그라운드, 백그라운드

리눅스 서버 환경에서도 다중의 프로세스가 실행되고 있는데, 하나의 명령어 쉘 상태에서 여러 프로그램을 실행하기 위하여 포그라운드(foreground), 백그라운드(background)라는 방법을 사용한다. 

#### 1) 포그라운드, 백그라운드
기본적으로 명령어 쉘에서 프로그램을 실행하면 종료 시까지 쉘을 사용할 수 없도록 하고 실행된다. 하지만 하나의 쉘 수행명령 상태에서 여러 개의 프로그램 (프로세스)를 실행하는 방법이 있다.

##### 포그라운드 작업: 쉘 전면 상황에서 실행한 프로세스, 프로그램명을 후 실행한다.

##### 백그라운드 작업: 쉘 후면 상황에서 작업을 실행, 백그라운드로 프로세스를 실행하면 프로세스는 쉘 뒷단에서 실행되므로 쉘 사용이 가능.

- 프로그램 뒤에 &를 붙여서 실행
- 명령어에서 백그라운드 작업을 호출할 경우 “%숫자” 형식으로 사용

#### 2) 실행제어

프로세스를 백그라운드로 실행시키는 경우에 이 프로세스를 실행하거나, 조회하거나, 중지하는 방법.

##### 백그라운드 실행

- 프로세스를 백그라운드로 실행시키기 위하여 명령어 뒤에 “&”를 붙여서 실행
- ps 명령으로 보면 현재 프로세스가 실행 중임을 알 수 있음.
- pstree 명령으로 보면 3개의 bash 프로세스가 실행 중임을 알 수 있음

##### jobs

- 실행되는 작업을 알 수 있음

##### fg, bg

- 작업번호 : ‘%숫자’ 는 백그라운드 작업을 지칭.
- fg %작업번호 : 백그라운드 작업을 포그라운드 작업으로 전환 함

##### kill

- kill %작업번호: 해당 작업번호의 프로세스를 강제로 끝냄.
- kill PID : 해당 PID의 프로세스를 강제로 끝냄

### (2) 프로세스 스케줄러

리눅스 서버를 운영하는 경우 어떠한 프로그램을 자동으로 매일, 매시간 반복 실행시키는 경우가 있을 수 있으며, 또한 시스템이 부팅 될 때 처음 시작하는 프로그램을 지정하여야 하는 경우가 있다.

이는 윈도우 시스템을 익숙하게 사용하는 경우 작업 스케줄러가 프로그램을 주기적으로 실행시키는 기능을 제공하고, 시작 프로그램이라는 폴더의 원하는 프로그램 아이콘을 옮겨 놓으면 윈도우 시스템이 부팅될 때마다 자동으로 실행되는 것과 마찬가지의 기능이다. 

해당 기능  : crontab, inittab

#### 1) crontab

crontab 은 서버 내 특정 프로세스를 주기적으로 실행시키고자 할 때 해당 프로세스와 실행 스케줄을 지정하고 실행시키는 데몬이다.

##### 1. crontab 처음 실행

- crontab-e: crontab 의  편집명령
- 처음 crontab-e 를 실행할 경우 앞으로 사용할 편집기 프로그램을 선택하라는 선택이 나옴
- 이때. vim (vi  편집기 개선버전)을 선택
- 해당 편집기는 우분투 서버에서 사용되는 기본 에디터 프로그램의 설정임.
- 추후 해당 기본 에디터 설정을 바꿀 경우 [update - alternatives - config editor]  명령으로 변경
- 편집기 프로그램에 들어가서 하단에 crontab 설정문장을 기록 저장

##### crontab 설정문장 

- [분, 시, 일, 월, 요일, 실행명령(전체경로)] 의 순서로 한 칸씩 띄어서 표시
- 띄어쓰기 중요: 띄어쓰기로 분, 시, 일, 월. 요일을 구분함
- 시간의 표현 방법
    - 분: 0 ~ 59
    - 시: 0 ~ 23
    - 일: 1 ~ 31
    - 월: 1 ~ 12
    - 요일: 1 ~ 7
- [분, 시, 일, 월, 요일] 설정을 응용하여 다중으로 설정할 수 있음
    - 여러 값 / 표현식 : 10, 30, 50  **** : 매 10, 30, 50분마다 실행
    - 범위 값 / 표현식 : 0 1-3 *** : 매일 1 ~ 3시에 진행
    - 시간 간격 / 표현식 :  1* /5 *** : 매일 5시간 간격으로 진행
    - 모든 값 / 표현식 : ***** : 매 분마다 실행

##### crontab 편집 및 실행

- crontab의 /home/a.sh 을 실행하고 해당 결과를 a_out.log 파일에 저장
- 해당 프로세스는 매주 일요일마다 실행 ex) ****7
- crontab-1 명령으로 crontab의 명령이 등록되어 있음을 확인
- crontab-r 명령으로 crontab의 명령 등록을 삭제함
- 해당 명령 실행 후 crontab-e 또는 crontab-1 로 모든 프로세스가 삭제되었음을 알 수 있음

#### inittab

inittab 은 서버가 시스템 부팅을 완료한 경우 바로 특정 프로세스를 자동으로 실행시키고자 할 때 해당 프로세스를 지정하여 실행시키는 데몬이다.

##### inittab의 변경이력

- 일반적인 unix에는 /etc/inittab 설정 파일에 unix  부팅 이후 자동으로 실행될 프로그램을 등록하며 지금도 사용함
- 추후 linux에서 inittab 기능을 /etc/event.d 의 sh 파일이 담당했음
- 현재 리눅스(우분투) 표준방식에 의거 /etc/rc.local 파일 맨 마지막 행에 시작 시 구동될 프로세스를 등록함

##### re.local

- /etc/rc.local 파일 맨 마지막 행에 시작 시 구동될 프로세스를 등록
- 마지막 행에 [exit 0], 즉 강제 종료 명령이 있기 때문에 그 윗줄에 기록
- [date >> /home/boot.log] 부팅 완료 시 시간을 매번 기록